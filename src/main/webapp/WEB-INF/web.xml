<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	
	<!-- 加载配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
<!-- 	    	classpath:META-INF/server/wink-core-context.xml, -->
	    	classpath:spring-mvc.xml
<!-- 	    	classpath:rest/sz-spring-rest.xml -->
    	</param-value>
	</context-param>
	
	<!-- 日志 -->
<!-- 	<context-param> -->
<!-- 		<param-name>log4jConfigLocation</param-name> -->
<!-- 		<param-value>classpath:log4j.properties</param-value> -->
<!-- 	</context-param> -->
	
	<!-- 字符编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- WebStatFilter用于采集web-jdbc关联监控的数据 -->
	<filter>
		<filter-name>DruidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
		</init-param>
	</filter>
	<!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中。 -->
	<filter-mapping>
		<filter-name>DruidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
	
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 在 Servlet API 中有一个 ServletContextListener 接口，它能够监听 ServletContext 对象的生命周期，实际上就是监听 Web 应用的生命周期。
		当Servlet 容器启动或终止Web 应用时，会触发ServletContextEvent 事件，该事件由ServletContextListener 来处理。
		在 ServletContextListener 接口中定义了处理ServletContextEvent 事件的两个方法。
	 
	 1、当Servlet 容器启动Web 应用时调用该方法。在调用完该方法之后，容器再对Filter 初始化， 
	   	并且对那些在Web 应用启动时就需要被初始化的Servlet 进行初始化。 
		contextInitialized(ServletContextEvent sce)  
	 
	 2、 当Servlet 容器终止Web 应用时调用该方法。在调用该方法之前，容器会先销毁所有的Servlet 和Filter 过滤器。 
		contextDestroyed(ServletContextEvent sce)   
	 -->
	<listener>
		<listener-class>com.ff.mvc.listener.WebAppContextListener</listener-class>
	</listener>
	
	<servlet>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 添加Rest服务配置信息 begin -->
<!-- 	<servlet> -->
<!-- 		<servlet-name>restService</servlet-name> -->
<!-- 		<servlet-class>org.apache.wink.server.internal.servlet.RestServlet</servlet-class> -->
<!-- 		<load-on-startup>2</load-on-startup> -->
<!-- 	</servlet> -->

<!-- 	<servlet-mapping> -->
<!-- 		<servlet-name>restService</servlet-name> -->
<!-- 		<url-pattern>/rest/*</url-pattern> -->
<!-- 	</servlet-mapping> -->
	<!-- 添加Rest服务配置信息 end -->

<!-- 	<error-page> -->
<!-- 		<error-code>404</error-code> -->
<!-- 		<location>/view/404.jsp</location> -->
<!-- 	</error-page> -->
</web-app>